# -*- coding: utf-8 -*-
"""AITherapist.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17j9jt5-WwOotLzyXIpaj5wXeZUxh7m3B
"""

import requests
import json
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from openai import OpenAI
import os
import requests

url = "https://api.apilayer.com/text_to_emotion"
headers= {
    "apikey": "4ylRLhjXs7UPYtWJMNUDxoBmRSyMTT5V"
  }

def textToEmotions(text):
  if isinstance(text, str) and len(text)>10:
    payload = text.encode("utf-8")
    response = requests.request("POST", url, headers=headers, data = payload)
    status_code = response.status_code
    result = response.text

    print(result)
    result = json.loads(result)  # Convert JSON string to dictionary
    values_array = np.array(list(result.values())) #Convert dict values into a numpy array
    print(values_array)
    return(values_array)
  else:
     return(np.array([0,0,0,0,0]))

emotions = ["Happy", 'Angry', "Surprise", "Sad", "Fear"]

client = OpenAI(api_key='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')
chatGPT_messages_list = []
role = "WHAT KIND OF THERAPIST DO YOU WANT CHATGPT TO PLAY? IDEAS INCLUDE: NORMAL, FORGIVING, HOLD ME ACCOUNTABLE, ADVICE, MOSTLY LISTENING, 988 BEFRIENDING STYLE"
prompt = "THIS IS THE PROMPT THAT THE PERSON ENTERED"


def make_conversation_string(conversation_list):
  conversation_string = ''
  for message in convesation_list:
    if message in chatGPT_messages_list:
      conversation_string.append("\n CHATGPT:" + message)
    else:
      conversation_string.append("\n User:" + message)

def ask_chat(role, prompt):

  final_role="You are a licsensed therapist, with years of experience helping clients with their mental health. Use all your skill as a therapist, but remember that today your client wants you to take on these ideas: {role}. Take on this role in your conversation. Throughout this conversation, remember to include some emotionally probing questions, some 'nods' that encourage your client to keep talking, some validations, which make them feel like their feelings are valid, and some simple summaries to make them feel heard, as well as anything else that would be helpful. The balance of these doesn't need to be even, but all should be used to give the best user experience possible. Until this comment, the conversation has been {list of conversation}"

  completion = client.chat.completions.create(
    model="gpt-3.5-turbo",
    messages=[
      {"role": "system", "content": final_role},
      {"role": "user", "content": prompt}
    ]
  )

  completion_message = completion.choices[0].message
  chatGPT_messages_list.append(completion_message)
  return(completion_message.content)

def get_emotion_score(prompt):
    final_role = "You are an expert in human emotion. Using the content of the message, return a very specific single emotion to summarize the message, followed by a colon, then exactly 5 numbers: each one a number from 0-10 grading, in order, the amount of Happiness, Anger, Surprise, Sadness, and Fear in the message. An example response would be 'Humiliated:2,5,7,5,5'"

    completion = client.chat.completions.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "system", "content": final_role},
            {"role": "user", "content": prompt}
        ]
    )

    completion_message = completion.choices[0].message
    total_string = completion_message.content

    try:
        parts = total_string.split(':')
        word_part = parts[0]
        emotions_string = parts[1]
        number_list = emotions_string.split(',')
        number_list = [int(num) for num in number_list]
        emotions_array = np.array(number_list)
    except Exception:
        emotions_array = textToEmotions(prompt)
    return(word_part, emotions_array)

    
    